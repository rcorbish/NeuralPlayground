extends layout

block content

	.upload( data-target='upload-train' ) training data

	.upload( data-target='upload-test' ) test data			

	a( href='config.json', target='_blank' )
		.upload( data-target='upload-config' ) configuration			

	.design
		form#create-nn( method='post')
			select(name='layer-type', placeholder='Number of layers' )
				option(value='MLP') Multi Layer Perceptron
				option(value='W2V') Word to vector
				option(value='DBN') Restricted Boltzmann Machine
				option(value='DBNA') Deep Belief Autoencoder
				option(value='LSTM') Long Short Term Memory
			input(type='number', required, name='num-layers', placeholder='Number of layers', min=2, value=3 )
			input(type='number', required, name='num-inputs', placeholder='Number of data inputs', min=2, value=5  )
			input(type='number', required, name='num-outputs', placeholder='Number of data outputs', min=1, value=2  )
			input(type='submit', value='Build my network')
		
	#results
	
	a( href='instructions' ) Instructions
	
	script
		document.getElementById( 'create-nn' ).onsubmit = function() {
			var xhr = new XMLHttpRequest();	
			xhr.onload = function(e) {
				document.getElementById( "results" ).innerHTML = "<pre>" + e.target.responseText + "</pre>";
			} ;
						
			xhr.open("POST", 'create' );
			xhr.send( new FormData(this) );
			return false ;
		}
		
		function initUploadDivs() {
			var divs = document.querySelectorAll( ".upload" ) ;
			var div ;
			for( var i=0 ; i<divs.length ; i++ ) {
				div = divs[i] ;
				div.ondragover = function (e) { 
					e.dataTransfer.dropEffect = 'copy';
					this.className = "upload dropok" ; 
					e.preventDefault();
					return false; 
				}.bind( div ) ;
				div.ondragend = function (e) { 
					this.className = "upload" ; 
					e.preventDefault();
					return false; 
				};
				div.ondragleave = function (e) { 
					this.className = "upload" ; 
					e.preventDefault();
					return false; 
				};
				div.ondrop = function (e) {
					this.className = "upload" ; 
					e.preventDefault();

					var webSocket = setupWebSocket() ;
					
					var file = e.dataTransfer.files[0] ;
					var reader = new FileReader();
					
					reader.onload = function (event) {
						var xhr = new XMLHttpRequest();	
						xhr.onload = function(e) {
							document.getElementById( "results" ).innerHTML = "<pre>" + e.target.responseText + "</pre>";
							webSocket.close() ;
							webSocket = null ;
						} ;
						xhr.onerror = function(e) {
							document.getElementById( "results" ).innerHTML = "<pre>" + e.target.responseText + "</pre>";
							webSocket.close() ;
							webSocket = null ;
						} ;		
						xhr.open("POST", this.dataset.target );
						xhr.setRequestHeader("Content-type", "text/csv");
						xhr.send( event.target.result );
					}.bind( this ) ;
					reader.readAsText(file);
					
					return false;
				}.bind( div ) ;
			}
		}
		initUploadDivs() ;
		
		//var timer = setInterval( function() {
		//		if( !webSocket || webSocket.readyState===3 ) {
		//			webSocket = setupWebSocket() ;
		//		} 
		//	}
		//	, 5000
		//) ;
		
		function setupWebSocket() {
			var protocol = window.location.protocol ;
			if( protocol === "http:" ) protocol = "ws:" ; else protocol = "wss:" ;
			webSocket = new WebSocket( protocol + "//" + location.hostname + ":" + location.port + "/messages/");
			webSocket.onopen = function () {
				document.getElementById( "results" ).style.border = "1px solid red" ;
			} ;
			
			webSocket.onmessage = function (msg) {
				document.getElementById( "results" ).innerHTML = "<pre>" + msg.data + "</pre>" ;
			} ;
			
			webSocket.onerror = function (error) {
				console.log( error ) ;
				webSocket.close() ;
			} ;
			
			webSocket.onclose = function () {
				console.log( "Closed" ) ;
				document.getElementById( "results" ).style.border = "" ;
			} ;
			return webSocket ;
		}
		
		//var webSocket = setupWebSocket() ;
		